<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby 1.9 | Valentin Mihov's blog]]></title>
  <link href="http://valentinmihov.com/blog/categories/ruby-1-dot-9/atom.xml" rel="self"/>
  <link href="http://valentinmihov.com/"/>
  <updated>2014-02-14T12:14:28+02:00</updated>
  <id>http://valentinmihov.com/</id>
  <author>
    <name><![CDATA[Valentin Mihov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Ruby 1.9.1 + Rails + MySQL and unicode characters]]></title>
    <link href="http://valentinmihov.com/2010/02/23/ruby_1_9_1_and_mysql_i18n/"/>
    <updated>2010-02-23T00:00:00+02:00</updated>
    <id>http://valentinmihov.com/2010/02/23/ruby_1_9_1_and_mysql_i18n</id>
    <content type="html"><![CDATA[<p>If you have tried to develop some rails application on Rails + Ruby 1.9.1 and MySQL database and you are storing non-English characters in your database probably you had a lot of pain with errors about incompatible charsets. This is a known problem and there is even <a href="https://rails.lighthouseapp.com/projects/8994/tickets/2476-ascii-8bit-encoding-of-query-results-in-rails-232-and-ruby-191">a bug in Rails' lighthouse</a> for it. There is even a hack which is going around the issue. The solution is not perfect, but it works in most of the cases.</p>

<!--more-->


<p>The problem in a nutshell is that the MySQL Ruby lib is not respecting the encoding setting defined in the database.yml file and does not encode the strings, that are pulled from the database in that encoding. Here is an example database.yml, which defines the encoding of the database connection:</p>

<p>``` yml</p>

<pre><code>development:
  adapter: mysql
  database: gsm_dev
  username: root
  password: 
  encoding: utf8
</code></pre>

<p>```</p>

<p>Fortunately there is a nice solution I found: use the <a href="http://github.com/tmtm/ruby-mysql" title="tmtm's ruby-mysql at 2.9 - GitHub">ruby-mysql</a> lib. It is on <a href="http://gemcutter.org/" title="RubyGems.org | your community gem host">gemcutter</a> so you can do:</p>

<p>``` bash</p>

<pre><code>gem uninstall mysql &amp;&amp; gem install ruby-mysql
</code></pre>

<p>```</p>

<p>This is going to uninstall the buggy mysql lib and install the working ruby-mysql. Hope that helps!</p>

<p>P.S.: I am not sure that this is a production-ready solution, but at least it provides a way to run things without hacks until the MySQL C API is fixed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience with developing a Rails 2.3.5 project with Ruby 1.9.1 Part 2]]></title>
    <link href="http://valentinmihov.com/2010/02/12/rails_2_3_5_with_ruby_1_9_1_dev_notes_part_2/"/>
    <updated>2010-02-12T00:00:00+02:00</updated>
    <id>http://valentinmihov.com/2010/02/12/rails_2_3_5_with_ruby_1_9_1_dev_notes_part_2</id>
    <content type="html"><![CDATA[<p>My journey into the ruby 1.9 land continues with some nice observations, tricks and tips.</p>

<!--more-->


<h2>Debugger still not working</h2>

<p>I just discovered something interesting. It is not really a big deal, but it is something to keep in mind:</p>

<pre><code>$ gem1.9 install ruby-debug
Building native extensions.  This could take a while...
ERROR:  Error installing ruby-debug:
    ERROR: Failed to build gem native extension.

/usr/local/Cellar/ruby/1.9.1-p376/bin/ruby1.9 extconf.rb
Can't handle 1.9.x yet
</code></pre>

<p>Obviously the debugger is still not working on ruby 1.9.</p>

<h2>Using the rails console with ruby 1.9</h2>

<p>There is a slight catch if you want to use the console. If you just do</p>

<pre><code>./script/console
</code></pre>

<p>you will notice many strange behavior, like broken unicode characters and even core dumps like the one below if you have unpacked native gems in your project.</p>

<pre><code>(3830) malloc: *** error for object 0x1027ec038: pointer being reallocated was not allocated
*** set a breakpoint in malloc_error_break to debug
Abort trap
</code></pre>

<p>The problem is that the console is actually using the system default irb, which was using ruby 1.8 on my machine. In order to use the 1.9 irb you should do the following:</p>

<pre><code>./script/console --irb=irb1.9
</code></pre>

<p>This is if your 1.9 irb is called irb1.9</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience with developing a Rails 2.3.5 project with Ruby 1.9.1 Part 1]]></title>
    <link href="http://valentinmihov.com/2010/01/20/rails_2_3_5_with_ruby_1_9_1_dev_notes/"/>
    <updated>2010-01-20T00:00:00+02:00</updated>
    <id>http://valentinmihov.com/2010/01/20/rails_2_3_5_with_ruby_1_9_1_dev_notes</id>
    <content type="html"><![CDATA[<p>I decided to use ruby 1.9.1 for my next project. One of the reasons I decided so is because ruby 1.9 is definitely faster than 1.8 and also it has a superior encoding support for the strings. Not to mention that living on the edge is a thrill :-)</p>

<!--more-->


<h2>Setup</h2>

<p>I am working on a MacBook Pro with Mac OS X 10.6.2. I installed <a href="http://github.com/mxcl/homebrew" title="mxcl's homebrew at master - GitHub">homebrew</a> so I can install ruby 1.9. Because I don't want to override my ruby 1.8 install I had to make a change in the formula for ruby. I added a --program-suffix=1.9 to the configure script. Here is how it will look:</p>

<pre><code>system "./configure", "--prefix=#{prefix}",
                      "--disable-debug",
                      "--disable-dependency-tracking",
                      "--enable-shared",
                      "--program-suffix=1.9"
</code></pre>

<p>After that I did:</p>

<pre><code>gem1.9 install rails mechanize nokogiri formtastic
</code></pre>

<p>After some glitches, because I had a previous install of ruby 1.9 on my machine everything ran well.</p>

<h2>Creating the rails app. Problems start to appear</h2>

<p>I created the rails project and here my first serious problem struck.</p>

<p>When I try to run</p>

<pre><code>ruby1.9 ./script/server
</code></pre>

<p>I receive</p>

<pre><code>Loading development environment (Rails 2.3.5)
Missing the Rails 2.3.5 gem. Please `gem install -v=2.3.5 rails`, update your RAILS_GEM_VERSION setting in config/environment.rb for the Rails version you do have installed, or comment out RAILS_GEM_VERSION to use the latest version installed.
</code></pre>

<p>A workaround for this is to do</p>

<pre><code>rake1.9 rails:freeze:gems
</code></pre>

<p>It is going to freeze the rails framework into the vendor folder and the server is able to run from there on. I noted to myself that I will have to unpack all the gems that I use in the project. This is really not a big deal for me, so I just continued from there on.</p>

<h2>Unicode templates. The biggest pain so far.</h2>

<p>I wrote my first template with some unicode symbols in it (the project is in Bulgarian) and when I tried to render the template I received an error:</p>

<pre><code>invalid byte sequence in US-ASCII
</code></pre>

<p>This was quite frustrating, but after some research I figured out that the reason for this is the default encoding of the ruby VM. It is using the LANG environment variable to determine that. My LANG was empty so it assumed US-ASCII. An easy way to test what is your default encoding is to do:</p>

<pre><code>$ irb1.9
&gt;&gt; __ENCODING__
=&gt; #&lt;Encoding:US-ASCII&gt;
&gt;&gt; 
</code></pre>

<p>This means that ruby will load all files with this encoding by default, which also includes the templates. The way to fix this is to set the LANG var:</p>

<pre><code>$ export LANG=en_US.UTF-8 &amp;&amp; irb1.9
&gt;&gt; __ENCODING__
=&gt; #&lt;Encoding:UTF-8&gt;
&gt;&gt; 
</code></pre>

<p>This fixes this error, but causes a new one:</p>

<pre><code>incompatible character encodings: ASCII-8BIT and UTF-8
</code></pre>

<p>This was a tough one. It turned out that there is a bug about this in the rails' lighthouse: <a href="https://rails.lighthouseapp.com/projects/8994/tickets/2188-i18n-fails-with-multibyte-strings-in-ruby-19-similar-to-2038">here</a></p>

<p>Using the workaround of Hektor fixed the issue, although it is not perfect, because it forces the encoding of the erb templates to utf-8, which will not work if you use some other encoding.</p>

<h2>Mechanize and SSL pages</h2>

<p>After going through this obstacle I encountered another one. I am using mechinize and nokogiri in my project to scrape some web pages. In one of the scenarios I am accessing a SSL page. Here is what I got after trying to parse this page:</p>

<pre><code>Net::HTTP::Post: &lt;some_ssl_web_page_address_here&gt;
request-header: accept =&gt; */*
request-header: user-agent =&gt; Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/418 (KHTML, like Gecko) Safari/417.9.3
request-header: connection =&gt; keep-alive
request-header: keep-alive =&gt; 300
request-header: accept-encoding =&gt; gzip,identity
request-header: accept-language =&gt; en-us,en;q=0.5
request-header: host =&gt; my.globul.bg
request-header: accept-charset =&gt; ISO-8859-1,utf-8;q=0.7,*;q=0.7
request-header: content-type =&gt; application/x-www-form-urlencoded
request-header: content-length =&gt; 110
Rescuing EOF error
Rescuing EOF error
Rescuing EOF error

EOFError (end of file reached):
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/protocol.rb:135:in `sysread'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/protocol.rb:135:in `block in rbuf_fill'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/timeout.rb:52:in `timeout'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/timeout.rb:82:in `timeout'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/protocol.rb:134:in `rbuf_fill'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/protocol.rb:116:in `readuntil'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/protocol.rb:126:in `readline'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/http.rb:2136:in `read_status_line'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/http.rb:2125:in `read_new'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/http.rb:1117:in `transport_request'
  /usr/local/Cellar/ruby/1.9.1-p376/lib/ruby1.9/1.9.1/net/http.rb:1103:in `request'
</code></pre>

<p>It turns out that this is a kind of a known problem, which is described <a href="http://github.com/tenderlove/mechanize/issues/#issue/7">here</a>. You can have a look at my comments and <a href="http://github.com/valo/mechanize/commit/e8c9d0ef72f55461ed33d4a0ee283683cb0f83aa">here</a> is a commit, which is fixing the problem. It is still not merged into the mechanize code, because I should come up with a unit test for it.</p>

<h2>Bottomline</h2>

<p>Lol! That was a tough fight! I think that ruby 1.9 and particularly the libs in the ruby community have a long way to go until they are usable by the regular developers. At least the community is driving forward. I haven't tried rails 3, but I heard that it has fixed the issues with the encodings in the templates. For the rest of the libs it is just a matter of time to polish all the issues. Until then: give 1.9 a try and report any issues you have.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 vs. Ruby 1.8 real-life speed benchmark, no database]]></title>
    <link href="http://valentinmihov.com/2009/07/13/ruby_19_vs_ruby_18_benchmark/"/>
    <updated>2009-07-13T00:00:00+03:00</updated>
    <id>http://valentinmihov.com/2009/07/13/ruby_19_vs_ruby_18_benchmark</id>
    <content type="html"><![CDATA[<p>I am writing my blog with <a href="http://www.sinatrarb.com/" title="Sinatra">sinatra</a> and I can proudly say that it runs with ruby 1.9.1 just fine. Unfortunately the hosting on <a href="http://heroku.com/" title="Heroku">heroku</a> does not allow using ruby 1.9, so it runs 1.8 in production.</p>

<!--more-->


<p>I decided that it will be great to make a benchmark of how the blog runs with the two interpreters. Here are the description and the result.</p>

<h2>Configuration</h2>

<ul>
<li>Machine: Apple MacBook Pro, 2.5 GHz Intel Core 2 Duo, 4GB 667 MHz DDR2, 250 GB HDD, 5400 RPM, Mac OS X 10.5.7</li>
<li>Ruby 1.8.7 p72, 64 bit</li>
<li>Ruby 1.9.1 p0, 64 bit</li>
<li>Sinatra 0.9.2</li>
<li>rdiscount 1.3.4</li>
<li>haml 2.0.9</li>
<li>thin 1.2.2</li>
<li>mongrel 1.1.5</li>
<li>nginx 0.7.61 as reverse proxy</li>
</ul>


<h2>The logic behind the test</h2>

<p>The page that I tested with was doing the following actions:</p>

<ul>
<li>Open around 18 files from the filesystem and read their first 3 lines</li>
<li>Parse the lines using regex</li>
<li>Parse some dates from the data read from the files</li>
<li>Read 5 of the files in-memory</li>
<li>Render some HAML templates with content got from the read files</li>
</ul>


<p>There is a git repository with the code. It is my <a href="http://github.com/valo/valentinmihov.com/tree/master">blog</a>.</p>

<h2>The test candidates</h2>

<p>I tested the following configurations:</p>

<ul>
<li>5 Thin instances running Ruby 1.8 behind nginx reverse proxy</li>
<li>5 Mongrel instances running Ruby 1.8 behind nginx reverse proxy</li>
<li>5 Thin instances running Ruby 1.9 behind nginx reverse proxy</li>
</ul>


<p>I use thin because this is the only web server, that compiles against ruby 1.9 on my machine. I even had to compile it myself, because of the 64 bit interpreter that I have (also custom compiled).</p>

<p>The tests were performed with concurrency 10 and 1000 requests. Here is the command line I used:</p>

<pre><code># ab -c 10 -n 1000 http://127.0.0.1:8080/
</code></pre>

<h2>The results</h2>

<table>
  <tr>
    <th>Setup</th>
    <th>Req/s</th>
    <th>ms/request</th>
  </tr>
  <tr>
    <td>Ruby 1.8 + thin</td>
    <td>19.55 </td>
    <td>511.599</td>
  </tr>
  <tr>
    <td>Ruby 1.8 + mongrel</td>
    <td>18.07</td>
    <td>553.511</td>
  </tr>
  <tr>
    <td>Ruby 1.9 + thin</td>
    <td>42.86</td>
    <td>233.336</td>
  </tr>
</table>


<p>Here are some graphs of the results</p>

<p><img src="/res/Ruby_1.8_vs_Ruby_1.9_ms_per_request.png" alt="Ms per request" />
<img src="/res/Ruby_1.8_vs_Ruby_1.9_req_per_sec.png" alt="Requests per second" /></p>

<p>As you see using ruby 1.9 boosts the performance of the application more than 2 times.</p>

<p>Here are links to the extended info generated by ab:</p>

<ul>
<li><a href="/res/ruby1.8_mongrel.txt">ruby 1.8 + mongrel</a></li>
<li><a href="/res/ruby1.8_thin.txt">ruby 1.8 + thin</a></li>
<li><a href="/res/ruby1.9_thin.txt">ruby 1.9 + thin</a></li>
</ul>


<p>I will be glad to hear your comments about the test and your experience with ruby 1.9. For the real enthusiasts this <a href="http://isitruby19.com/">site</a> provides info about what gems are 1.9 compatible.</p>
]]></content>
  </entry>
  
</feed>
