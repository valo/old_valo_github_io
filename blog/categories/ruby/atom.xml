<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Valentin Mihov's blog]]></title>
  <link href="http://www.valentinmihov.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.valentinmihov.com/"/>
  <updated>2014-02-13T17:51:29+02:00</updated>
  <id>http://www.valentinmihov.com/</id>
  <author>
    <name><![CDATA[Valentin Mihov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Switching my blog to jekyll and compass]]></title>
    <link href="http://www.valentinmihov.com/2010/02/02/switching_to_jekyll_and_compass/"/>
    <updated>2010-02-02T00:00:00+02:00</updated>
    <id>http://www.valentinmihov.com/2010/02/02/switching_to_jekyll_and_compass</id>
    <content type="html"><![CDATA[<p>Probably you remember that some time ago I decided to switch my blog from <a href="http://blogger.google.com/" title="Google">blogger</a> to a custom made blogging engine written my me. It was a simple sinatra app, which was parsing a bunch of markdown files, which were the posts and rendering the blog.</p>

<!--more-->


<p>What I really liked in this approach are several things:</p>

<ul>
<li>I can easily blog from TextMate or any other editor supporting markdown highlighting</li>
<li>I can keep my blog in source countrol, like github</li>
<li>I have the flexibility to do whatever I want with the text files of the posts (like exporting them to PDF or LaTeX later)</li>
<li>I avoid the complexity of WordPress and the WTFiness when the posts render weirdly from the database (like escaped '&lt;' and '>' symbols)</li>
</ul>


<p>As a whole I think that heavy engines like <a href="http://wordpress.org/" title="WordPress &#8250; Blog Tool and Publishing Platform">WordPress</a> are just too complex for most of the blogs. Keeping your posts in a database makes them difficult to be exported to other formats like PDF and also the HTML code tends to become too messy in a very short time. Especially if you are using WYSIWYG editors.</p>

<h2>Why I decided to switch from my initial custom engine?</h2>

<p>The <a href="http://www.sinatrarb.com/" title="Sinatra">sinatra</a> app that I implemented was basically parsing a bunch of markdown files with some meta data embedded in them and was rendering them in the blog. A lot of the functionality was offloaded to javascript.</p>

<p>There was a major flaw in that approach: SEO sucked!</p>

<p>Because of the javascript code, which was doing most of the work the search engine crawlers were not able to detect the proper titles of the posts and the titles are something <em>really</em> important for the SEO.</p>

<p>So, I had to make a change in order to make my blog discoverable. I decided to use <a href="http://github.com/mojombo/jekyll" title="mojombo's jekyll at master - GitHub">jekyll</a> because a lot of people are using it already. For example <a href="http://github.com/" title="Secure source code hosting and collaborative development - GitHub">github</a> uses it for its project pages. Also quite a lot of people are using it as a blogging engine.</p>

<p>It is quite powerful and also it is doing preprocessing and effectively translates your blog into a static site. This is a great thing, because it makes the blog <em>very</em> fast.</p>

<p>Comments? Use a JS solution like <a href="http://disqus.com/" title="DISQUS Comments | Powering Discussion on the Web">disqus</a> and you will be fine ;-)</p>

<p>You want a twitter widget? Javascript is your friend. The twitter widget on my blog is a <a href="http://jquery.com/" title="jQuery: The Write Less, Do More, JavaScript Library">jQuery</a> plugin, which integrates very easily.</p>

<h2>What about <a href="http://compass-style.org/" title="Compass">compass</a>?</h2>

<p>May be you heaven't heard of compass, but tt is really great! The idea is that you have that special language to write CSS called <a href="http://sass-lang.com/" title="Sass - Syntactically Awesome Stylesheets">SASS</a>. The good thing about SASS is that it gives you things like mixins, partials and variables, which makes reusing CSS easier. It integrates with already existing CSS frameworks like <a href="http://www.blueprintcss.org/" title="Blueprint: A CSS Framework | Spend your time innovating, not replicating">blueprint</a> and makes writing layouts a peace of cake.</p>

<p>For example, imagine that you are developing a site and you want to have 2 columns layout with header, content and footer. Here is how your CSS will look like with compass:</p>

<pre><code>// defines a class for a body tag for 2 columns
body.two-col
  #container
    +container // includes a partial called 'container'
  #header, #footer
    +column(24) // the header and the footer are 24 columns wide
  #sidebar
    +column(7, true) // the sidebar is 7 columns wide
  #content
    +column(16) // the content part is 16 columns wide
    +append(1) // and it as 1 column spacing from the sidebar
</code></pre>

<p>This is really convenient, because you don't have to handle a lot of standard CSS and you just throw out your ideas.</p>

<h2>Source code</h2>

<p>You can find the source code of this blog here: <a href="http://github.com/valo/valentinmihov.com">http://github.com/valo/valentinmihov.com</a>. Any comments and suggestions are more than welcome.</p>

<h2>What's next?</h2>

<p>I plan on posting a video on getting started with jekyll, compass and <a href="http://heroku.com/" title="Heroku | Ruby Cloud Platform as a Service">heroku</a> for your own blog. It will be a several steps procedure, which will allow most of the people to have their own jekyll blog, hosted for free on heroku (which uses the Amazon cloud)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 vs. Ruby 1.8 real-life speed benchmark, no database]]></title>
    <link href="http://www.valentinmihov.com/2009/07/13/ruby_19_vs_ruby_18_benchmark/"/>
    <updated>2009-07-13T00:00:00+03:00</updated>
    <id>http://www.valentinmihov.com/2009/07/13/ruby_19_vs_ruby_18_benchmark</id>
    <content type="html"><![CDATA[<p>I am writing my blog with <a href="http://www.sinatrarb.com/" title="Sinatra">sinatra</a> and I can proudly say that it runs with ruby 1.9.1 just fine. Unfortunately the hosting on <a href="http://heroku.com/" title="Heroku">heroku</a> does not allow using ruby 1.9, so it runs 1.8 in production.</p>

<!--more-->


<p>I decided that it will be great to make a benchmark of how the blog runs with the two interpreters. Here are the description and the result.</p>

<h2>Configuration</h2>

<ul>
<li>Machine: Apple MacBook Pro, 2.5 GHz Intel Core 2 Duo, 4GB 667 MHz DDR2, 250 GB HDD, 5400 RPM, Mac OS X 10.5.7</li>
<li>Ruby 1.8.7 p72, 64 bit</li>
<li>Ruby 1.9.1 p0, 64 bit</li>
<li>Sinatra 0.9.2</li>
<li>rdiscount 1.3.4</li>
<li>haml 2.0.9</li>
<li>thin 1.2.2</li>
<li>mongrel 1.1.5</li>
<li>nginx 0.7.61 as reverse proxy</li>
</ul>


<h2>The logic behind the test</h2>

<p>The page that I tested with was doing the following actions:</p>

<ul>
<li>Open around 18 files from the filesystem and read their first 3 lines</li>
<li>Parse the lines using regex</li>
<li>Parse some dates from the data read from the files</li>
<li>Read 5 of the files in-memory</li>
<li>Render some HAML templates with content got from the read files</li>
</ul>


<p>There is a git repository with the code. It is my <a href="http://github.com/valo/valentinmihov.com/tree/master">blog</a>.</p>

<h2>The test candidates</h2>

<p>I tested the following configurations:</p>

<ul>
<li>5 Thin instances running Ruby 1.8 behind nginx reverse proxy</li>
<li>5 Mongrel instances running Ruby 1.8 behind nginx reverse proxy</li>
<li>5 Thin instances running Ruby 1.9 behind nginx reverse proxy</li>
</ul>


<p>I use thin because this is the only web server, that compiles against ruby 1.9 on my machine. I even had to compile it myself, because of the 64 bit interpreter that I have (also custom compiled).</p>

<p>The tests were performed with concurrency 10 and 1000 requests. Here is the command line I used:</p>

<pre><code># ab -c 10 -n 1000 http://127.0.0.1:8080/
</code></pre>

<h2>The results</h2>

<table>
  <tr>
    <th>Setup</th>
    <th>Req/s</th>
    <th>ms/request</th>
  </tr>
  <tr>
    <td>Ruby 1.8 + thin</td>
    <td>19.55 </td>
    <td>511.599</td>
  </tr>
  <tr>
    <td>Ruby 1.8 + mongrel</td>
    <td>18.07</td>
    <td>553.511</td>
  </tr>
  <tr>
    <td>Ruby 1.9 + thin</td>
    <td>42.86</td>
    <td>233.336</td>
  </tr>
</table>


<p>Here are some graphs of the results</p>

<p><img src="/res/Ruby_1.8_vs_Ruby_1.9_ms_per_request.png" alt="Ms per request" />
<img src="/res/Ruby_1.8_vs_Ruby_1.9_req_per_sec.png" alt="Requests per second" /></p>

<p>As you see using ruby 1.9 boosts the performance of the application more than 2 times.</p>

<p>Here are links to the extended info generated by ab:</p>

<ul>
<li><a href="/res/ruby1.8_mongrel.txt">ruby 1.8 + mongrel</a></li>
<li><a href="/res/ruby1.8_thin.txt">ruby 1.8 + thin</a></li>
<li><a href="/res/ruby1.9_thin.txt">ruby 1.9 + thin</a></li>
</ul>


<p>I will be glad to hear your comments about the test and your experience with ruby 1.9. For the real enthusiasts this <a href="http://isitruby19.com/">site</a> provides info about what gems are 1.9 compatible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Conference in Sofia]]></title>
    <link href="http://www.valentinmihov.com/2009/06/25/rails_conf/"/>
    <updated>2009-06-25T00:00:00+03:00</updated>
    <id>http://www.valentinmihov.com/2009/06/25/rails_conf</id>
    <content type="html"><![CDATA[<p>On the 27th of July there will be a small rails conference in Sofia. http://techcamp.eu/2009/06/21/rails-конференция-27-06-2009/ has more info for the event.</p>

<p>I will be speaking on the conference about stubbing and mocking with mocha. I have made an example project on which I will explain my ideas. You can find the latest source <a href="http://github.com/valo/mochar/tree/master">here</a>.</p>

<p>We will see there :-).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing the rails native mysql bindings for a "fink" mysql]]></title>
    <link href="http://www.valentinmihov.com/2008/06/17/rails_native_mysql_install/"/>
    <updated>2008-06-17T00:00:00+03:00</updated>
    <id>http://www.valentinmihov.com/2008/06/17/rails_native_mysql_install</id>
    <content type="html"><![CDATA[<p>I am using Mac OS X Leopard and I have the package manager <a href="http://www.finkproject.org/">fink</a> for installing open source software. I have used fink to install mysql and today it turned out that this was a horrible mistake.</p>

<p>I lost around 1:30 hours for figure out how to compile the mysql gem. The installer was not able to find the mysql libraries and includes. The magic line turned out to be:</p>

<pre><code># gem install mysql -- --with-mysql-config=`which mysql_config`
</code></pre>

<p>This makes the install just a piece of cake! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPod touch и как да си свалим artwork в iTunes]]></title>
    <link href="http://www.valentinmihov.com/2008/02/25/itunes_artwork/"/>
    <updated>2008-02-25T00:00:00+02:00</updated>
    <id>http://www.valentinmihov.com/2008/02/25/itunes_artwork</id>
    <content type="html"><![CDATA[<p>Преди 1-2 дена се сдобих с новият ми iPod Touch. Готина джажа и определено има много потенциал. Екрана наистина е нещо страхотно, а това че е 100% touch-screen, го прави още по-готин.</p>

<p>Във връзка с това и след като се оказах доста трудно подвижен след прекараната по пистите на Витоша неделя, реших че е крайно време да си организирам музиката и най-вече тази, която най-много слушам. След като реших, че е редно всеки един албум да има и artwork, така че да мога да си разлиствам албумите в cover flow на ipod-a, тръгнах да търся лесен начин това да стане автоматично. Оказа се, че има една много полезна програмка, писна от няколко доста млади студент от щатите. Хвала на таквизи млади хора. Много се кефя, когато видя оригинални идеи на млади хора. Става въпрос за <a href="http://nclasssoftware.com/corripio">Corripio</a>. Идеята е че тя чете всички песни от iTunes и после може да търси за обложки, текстове и да оправя тагове. Аз я ползвам само за обложки и бих казал, че се справя доста добре.</p>

<p>Нещо много интересно: начина на търсене е направен доста интелигентно и разширяемо. Има скриптове писани на какъвто и да е език, който се поддържа от системата, които по подаден албум и песен търсят url-и към обложките. Скриптовете, които идват с инсталацията са писани на Ruby, като може да се намери скрипт, който търси в amazon.com, пак на Ruby. Общо взето забелязвам, че Ruby започва да се превръща в скриптовия език "of choice" за Mac OS X.</p>
]]></content>
  </entry>
  
</feed>
