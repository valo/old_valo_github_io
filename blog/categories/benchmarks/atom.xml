<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: benchmarks | Valentin Mihov's blog]]></title>
  <link href="http://valentinmihov.com/blog/categories/benchmarks/atom.xml" rel="self"/>
  <link href="http://valentinmihov.com/"/>
  <updated>2014-02-14T12:14:28+02:00</updated>
  <id>http://valentinmihov.com/</id>
  <author>
    <name><![CDATA[Valentin Mihov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 vs. Ruby 1.8 real-life speed benchmark, no database]]></title>
    <link href="http://valentinmihov.com/2009/07/13/ruby_19_vs_ruby_18_benchmark/"/>
    <updated>2009-07-13T00:00:00+03:00</updated>
    <id>http://valentinmihov.com/2009/07/13/ruby_19_vs_ruby_18_benchmark</id>
    <content type="html"><![CDATA[<p>I am writing my blog with <a href="http://www.sinatrarb.com/" title="Sinatra">sinatra</a> and I can proudly say that it runs with ruby 1.9.1 just fine. Unfortunately the hosting on <a href="http://heroku.com/" title="Heroku">heroku</a> does not allow using ruby 1.9, so it runs 1.8 in production.</p>

<!--more-->


<p>I decided that it will be great to make a benchmark of how the blog runs with the two interpreters. Here are the description and the result.</p>

<h2>Configuration</h2>

<ul>
<li>Machine: Apple MacBook Pro, 2.5 GHz Intel Core 2 Duo, 4GB 667 MHz DDR2, 250 GB HDD, 5400 RPM, Mac OS X 10.5.7</li>
<li>Ruby 1.8.7 p72, 64 bit</li>
<li>Ruby 1.9.1 p0, 64 bit</li>
<li>Sinatra 0.9.2</li>
<li>rdiscount 1.3.4</li>
<li>haml 2.0.9</li>
<li>thin 1.2.2</li>
<li>mongrel 1.1.5</li>
<li>nginx 0.7.61 as reverse proxy</li>
</ul>


<h2>The logic behind the test</h2>

<p>The page that I tested with was doing the following actions:</p>

<ul>
<li>Open around 18 files from the filesystem and read their first 3 lines</li>
<li>Parse the lines using regex</li>
<li>Parse some dates from the data read from the files</li>
<li>Read 5 of the files in-memory</li>
<li>Render some HAML templates with content got from the read files</li>
</ul>


<p>There is a git repository with the code. It is my <a href="http://github.com/valo/valentinmihov.com/tree/master">blog</a>.</p>

<h2>The test candidates</h2>

<p>I tested the following configurations:</p>

<ul>
<li>5 Thin instances running Ruby 1.8 behind nginx reverse proxy</li>
<li>5 Mongrel instances running Ruby 1.8 behind nginx reverse proxy</li>
<li>5 Thin instances running Ruby 1.9 behind nginx reverse proxy</li>
</ul>


<p>I use thin because this is the only web server, that compiles against ruby 1.9 on my machine. I even had to compile it myself, because of the 64 bit interpreter that I have (also custom compiled).</p>

<p>The tests were performed with concurrency 10 and 1000 requests. Here is the command line I used:</p>

<pre><code># ab -c 10 -n 1000 http://127.0.0.1:8080/
</code></pre>

<h2>The results</h2>

<table>
  <tr>
    <th>Setup</th>
    <th>Req/s</th>
    <th>ms/request</th>
  </tr>
  <tr>
    <td>Ruby 1.8 + thin</td>
    <td>19.55 </td>
    <td>511.599</td>
  </tr>
  <tr>
    <td>Ruby 1.8 + mongrel</td>
    <td>18.07</td>
    <td>553.511</td>
  </tr>
  <tr>
    <td>Ruby 1.9 + thin</td>
    <td>42.86</td>
    <td>233.336</td>
  </tr>
</table>


<p>Here are some graphs of the results</p>

<p><img src="/res/Ruby_1.8_vs_Ruby_1.9_ms_per_request.png" alt="Ms per request" />
<img src="/res/Ruby_1.8_vs_Ruby_1.9_req_per_sec.png" alt="Requests per second" /></p>

<p>As you see using ruby 1.9 boosts the performance of the application more than 2 times.</p>

<p>Here are links to the extended info generated by ab:</p>

<ul>
<li><a href="/res/ruby1.8_mongrel.txt">ruby 1.8 + mongrel</a></li>
<li><a href="/res/ruby1.8_thin.txt">ruby 1.8 + thin</a></li>
<li><a href="/res/ruby1.9_thin.txt">ruby 1.9 + thin</a></li>
</ul>


<p>I will be glad to hear your comments about the test and your experience with ruby 1.9. For the real enthusiasts this <a href="http://isitruby19.com/">site</a> provides info about what gems are 1.9 compatible.</p>
]]></content>
  </entry>
  
</feed>
