<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | Valentin Mihov's blog]]></title>
  <link href="http://valentinmihov.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://valentinmihov.com/"/>
  <updated>2014-02-14T12:14:28+02:00</updated>
  <id>http://valentinmihov.com/</id>
  <author>
    <name><![CDATA[Valentin Mihov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Ruby 1.9.1 + Rails + MySQL and unicode characters]]></title>
    <link href="http://valentinmihov.com/2010/02/23/ruby_1_9_1_and_mysql_i18n/"/>
    <updated>2010-02-23T00:00:00+02:00</updated>
    <id>http://valentinmihov.com/2010/02/23/ruby_1_9_1_and_mysql_i18n</id>
    <content type="html"><![CDATA[<p>If you have tried to develop some rails application on Rails + Ruby 1.9.1 and MySQL database and you are storing non-English characters in your database probably you had a lot of pain with errors about incompatible charsets. This is a known problem and there is even <a href="https://rails.lighthouseapp.com/projects/8994/tickets/2476-ascii-8bit-encoding-of-query-results-in-rails-232-and-ruby-191">a bug in Rails' lighthouse</a> for it. There is even a hack which is going around the issue. The solution is not perfect, but it works in most of the cases.</p>

<!--more-->


<p>The problem in a nutshell is that the MySQL Ruby lib is not respecting the encoding setting defined in the database.yml file and does not encode the strings, that are pulled from the database in that encoding. Here is an example database.yml, which defines the encoding of the database connection:</p>

<p>``` yml</p>

<pre><code>development:
  adapter: mysql
  database: gsm_dev
  username: root
  password: 
  encoding: utf8
</code></pre>

<p>```</p>

<p>Fortunately there is a nice solution I found: use the <a href="http://github.com/tmtm/ruby-mysql" title="tmtm's ruby-mysql at 2.9 - GitHub">ruby-mysql</a> lib. It is on <a href="http://gemcutter.org/" title="RubyGems.org | your community gem host">gemcutter</a> so you can do:</p>

<p>``` bash</p>

<pre><code>gem uninstall mysql &amp;&amp; gem install ruby-mysql
</code></pre>

<p>```</p>

<p>This is going to uninstall the buggy mysql lib and install the working ruby-mysql. Hope that helps!</p>

<p>P.S.: I am not sure that this is a production-ready solution, but at least it provides a way to run things without hacks until the MySQL C API is fixed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing the rails native mysql bindings for a "fink" mysql]]></title>
    <link href="http://valentinmihov.com/2008/06/17/rails_native_mysql_install/"/>
    <updated>2008-06-17T00:00:00+03:00</updated>
    <id>http://valentinmihov.com/2008/06/17/rails_native_mysql_install</id>
    <content type="html"><![CDATA[<p>I am using Mac OS X Leopard and I have the package manager <a href="http://www.finkproject.org/">fink</a> for installing open source software. I have used fink to install mysql and today it turned out that this was a horrible mistake.</p>

<p>I lost around 1:30 hours for figure out how to compile the mysql gem. The installer was not able to find the mysql libraries and includes. The magic line turned out to be:</p>

<pre><code># gem install mysql -- --with-mysql-config=`which mysql_config`
</code></pre>

<p>This makes the install just a piece of cake! :)</p>
]]></content>
  </entry>
  
</feed>
