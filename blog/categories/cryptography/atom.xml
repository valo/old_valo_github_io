<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cryptography | Valentin Mihov's blog]]></title>
  <link href="http://valentinmihov.com/blog/categories/cryptography/atom.xml" rel="self"/>
  <link href="http://valentinmihov.com/"/>
  <updated>2014-02-13T16:00:47+02:00</updated>
  <id>http://valentinmihov.com/</id>
  <author>
    <name><![CDATA[Valentin Mihov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SMTPs и POP3s с JavaMail]]></title>
    <link href="http://valentinmihov.com/2008/03/05/smtp_pop3_javamail/"/>
    <updated>2008-03-05T00:00:00+02:00</updated>
    <id>http://valentinmihov.com/2008/03/05/smtp_pop3_javamail</id>
    <content type="html"><![CDATA[<p>Тези дни ми се наложи да се боря с JavaMail и поддръжката му на SSL/TLS за вързване към мейл сървърите. На пръв поглед от документацията се вижда, че това се поддържа от API-то и не би трябвало да има проблеми с интеграцията. На втори поглед, както винаги, се разбира че всъщност нещата не стоят толкова просто.</p>

<ul>
<li><p>Първото нещо, което прави впечатление след като вече имаме конфигурирани сървъри и приложение, което се вързва към тях е, че ако използваме тестови сертификати, които не са подписани от достоверно certificate authority приложението ни ще гърми с грешка от сорта на:</p>

<p> sun.security.provider.certpath.SunCertPathBuilderException:
 unable to find valid certification path to requested target</p>

<p>Това се получава, защото JVM не може да вярва на сертификата отсреща. За целта има един файл, които съдържа всички сертификати, на които Java вярва и той се намира в %JAVA_HOME%\jre\lib\security\cacerts. Защитен е с парола, която по подразбиране е "changeit". За да преодолеем горния проблем трябва да направил следното:</p>

<blockquote><p>cd "C:\Program Files\Java\jdk1.5.0_09\jre\lib\security"
....\bin\keytool.exe -import -trustcacerts -storepass changeit -alias \
  mykey -keystore cacerts -file E:\pop3d.pem</p></blockquote>

<p>Това ще "вкара" сертификата в trusted сертификатите под името mykey. Ако това име вече съществува не е проблем да се ползва произволно.</p></li>
<li><p>Нагласяне на версиите на SSL/TLS.</p>

<p>Нещо, което почти ме накара да се хвърля от прозореца (спря ме само това, че е прекалено ниско ;-)). Като цяло в Java 1.5 и нагоре има поддръжка на SSLv3 и TLS 1.0 (<a href="http://java.sun.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#SunJSSE">инфо</a>). Обаче ако някой сървър настоява за SSLv2, това ще накара Java да хвърли грешка. Интересното е, че използвайки OpenSSL 0.9.8g със SSLv3 нещата не работят, тъй като сървъра се оплаква, че не може да декриптира пакетите от клиента. Това е интересна тема за разследване.</p></li>
<li><p>Конфигуриране на postfix и courier</p></li>
</ul>


<p>В postfix има една опция с която може да си поиграе човек: smtpd_tls_mandatory_ciphers. Там може да се зададе какъв точно протокол да се ползва. Аз специално не успях да го подкарам със SSLv3 и съм оставил стойността по подразбиране.</p>

<p>В courier има няколко опции, които са доста важни. Едната е TLS_PROTOCOL, която оказва какъв протокол да се ползва. Интересното, че единствения начин, по които аз успях да го подкарам е като задам SSL23, което е НЕДОКУМЕНТИРАНА СТОЙНОСТ! Всякаква друга стойност там прецаква нещата. Другата е POP3_TLS_REQUIRED. Това е дали да се изисква STARTTLS (държа да отбележа, че това е за pop3 сървъра), което за съжаление е неподдържана функционалност от JavaMail и трябва да е изключено.</p>

<p>Ако имам време ще разуча още малко нещата. Иска ми се да направя клиент, който може да се свързва към сървъри със всякакви конфигурации.</p>

<p><em>Edit:</em> Една много полезна статия, която обяснява нещата на разбираем език: <a href="http://sial.org/howto/openssl/tls-name/">http://sial.org/howto/openssl/tls-name/</a></p>
]]></content>
  </entry>
  
</feed>
